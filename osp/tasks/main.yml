# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# launch an OSP virtual machine
---
- name: gathering facts for {{ private }} in {{ region }}
  os_networks_facts:
    cloud: "{{ tenant }}"
    filters:
      id: "{{ internal_uuid }}"

- set_fact:
    private_management_subnet_id: "{{ openstack_networks.0.id }}"
  when:
    - openstack_networks is defined
    - openstack_networks.skipped is not defined

- name: creating ssh security group
  os_security_group:
    cloud: "{{ tenant }}"
    state: present
    name: "{{ project }}_ssh"
    description: "ssh ingress and unrestricted egress rules (ansible)"
  register: dnsg_ssh

- name: adding ports to {{ dnsg_ssh.secgroup.description }}
  os_security_group_rule:
    cloud: "{{ tenant }}"
    security_group: "{{ dnsg_ssh.id }}"
    protocol: tcp
    port_range_min: 22
    port_range_max: 22
    remote_ip_prefix: "{{ internal_subnet }}"
    
- name: creating {{ application }} security group
  os_security_group:
    cloud: "{{ tenant }}"
    state: present
    name: "{{ project }}_{{ application }}"
    description: "{{ application }} ingress and unrestricted egress rules (ansible)"
  register: dnsg_postgresql

- name: adding ports to {{ dnsg_postgresql.secgroup.description }}
  os_security_group_rule:
    cloud: "{{ tenant }}"
    security_group: "{{ dnsg_postgresql.id }}"
    protocol: tcp
    port_range_min: 5432
    port_range_max: 5432
    remote_ip_prefix: "{{ external_subnet }}"

- name: checking {{ region }}-{{ application }}-private-key.pem
  stat: path="./{{ region }}-{{ application }}-private-key.pem"
  register: existing_key
    
# use existing SSH key
- name: using existing {{ region}}-{{ application }}
  os_keypair:
    cloud: "{{ tenant }}"
    state: present
    name: "{{ region }}-{{ application }}"
    public_key_file: "./{{ region }}-{{ application }}-public-key.pem" 
  register: existing_osp_keypair    
  when:
    - existing_key.stat.exists

# create new SSH key
- block:    
  - name: creating {{ region}}-{{ application }}
    os_keypair:
      cloud: "{{ tenant }}"
      state: present
      name: "{{ region }}-{{ application }}"
    register: new_osp_keypair
    
  - name: saving {{ region }}-{{ application }}
    copy:
      dest: "./{{ new_osp_keypair.key.name }}-private-key.pem"
      content: "{{ new_osp_keypair.key.private_key }}"
      mode: 0400
    when:
      - osp_keypair.changed
  
  - name: saving {{ region }}-{{ application }}
    copy:
      dest: "./{{ new_osp_keypair.key.name }}-public-key.pem"
      content: "{{ new_osp_keypair.key.public_key }}"
      mode: 0400
    when:
      - osp_keypair.changed 
  when:
    - not existing_key.stat.exists

# sigh @ ansible for making me do this
- set_fact:
    osp_keypair: "{{ existing_osp_keypair }}"
  when: 
    - existing_key.stat.exists

- set_fact:
    osp_keypair: "{{ new_osp_keypair }}"
  when: 
    - not existing_key.stat.exists

# always boot a single postgresql server
- name: setting count to single node
  set_fact:
    count: 1

# the math is overkill, but it's useful if we want to get more complicated
- name: configuring instance count
  set_fact:
    count: "{{ count | int * 2 }}" 

# this grouping lets YAML tags be optional
- set_fact:
    cluster: "{{ cluster | default ('a') }}"

- set_fact:
    role: "{{ role | default ('none') }}"
  when:
    - not replica

# if we are doing a master/replica pair assign master
- set_fact:
    role: master    
  when:
    - replica

- set_fact:
    dataflow: "{{ dataflow | default ('none') }}"

# create standalone/master volume here since OSP only mounts pre-exiting volumes
- name: creating standalone/master {{ data_volume }}GB
  os_volume:
    state: present
    cloud: "{{ tenant }}"
    size: "{{ data_volume }}"
    volume_type: "{{ block_pool }}"
    display_name: "{{ project }}_{{ application }}_{{ role }}_{{ cluster }}"
  when:
    - data_volume

# openstack instance names must be unique, so we now have this naming disaster
# the count trick seems to be necessary to generate a list of results for a single instance
- name: launching standalone (master) instance
  os_server:
    state: present
    cloud: "{{ tenant }}"
    name: "{{ project }}_{{ application }}_{{ role }}_{{ cluster }}"
    meta:
      Name: "{{ project }}_{{ application }}"
      Tenant: "{{ tenant }}"
      Project: "{{ project }}"
      Cloud: "{{ cloud }}"
      Domain: "{{ domain }}"
      Application: "{{ application }}"
      Cluster: "{{ cluster }}"
      Role: "{{ role }}"
      Dataflow: "{{ dataflow }}"    
    region_name: "{{ region }}"
    availability_zone: "{{ zone }}"
    image: "{{ image }}"
    key_name: "{{ osp_keypair.key.name }}"
    timeout: 200
    auto_ip: yes
    reuse_ips: true
    flavor: "{{ type }}"
    nics:
      - net-id: "{{ internal_uuid }}"
      - net-id: "{{ external_uuid }}"
    security_groups: "{{ project }}_ssh,{{ project }}_{{ application }}"
    volumes: "{{ project }}_{{ application }}_{{ role }}_{{ cluster }}"
  register: osp_standalone
  with_sequence: count={{ count }}
  when:
    - not replica
  
# this handles the master/replica pair
- block: 
  - set_fact:
      role: replica    

  # create replica volume here since OSP only mounts pre-exiting volumes
  - name: creating replica {{ data_volume }}GB
    os_volume:
      state: present
      cloud: "{{ tenant }}"
      size: "{{ data_volume }}"
      volume_type: "{{ block_pool }}"
      display_name: "{{ project }}_{{ application }}_{{ role }}_{{ cluster }}"
    
  - name: launching master/replica pair
    os_server:
      state: present
      cloud: "{{ tenant }}"
      name: "{{ project }}_{{ application }}_{{ item }}_{{ cluster }}"
      meta:
        Name: "{{ project }}_{{ application }}"
        Tenant: "{{ tenant }}"
        Project: "{{ project }}"
        Cloud: "{{ cloud }}"
        Domain: "{{ domain }}"
        Application: "{{ application }}"
        Cluster: "{{ cluster }}"
        Role: "{{ item }}"
        Dataflow: "{{ dataflow }}"    
      region_name: "{{ region }}"
      availability_zone: "{{ zone }}"
      image: "{{ image }}"
      key_name: "{{ osp_keypair.key.name }}"
      timeout: 200
      auto_ip: yes
      reuse_ips: true
      flavor: "{{ type }}"
      nics:
        - net-id: "{{ internal_uuid }}"
        - net-id: "{{ external_uuid }}"
      security_groups: "{{ project }}_ssh,{{ project }}_{{ application }}"
      volumes: "{{ project }}_{{ application }}_{{ item }}_{{ cluster }}"
    register: osp_pair
    with_items:
      - master
      - replica
  when:
    - replica

# sigh @ ansible for making me do this 
- set_fact:
    osp: "{{ osp_standalone }}"
  when:
    - not replica

- set_fact:
    osp: "{{ osp_pair }}"
  when:
    - replica
  
- name: assigning {{ float_pool }} floating ip to {{ item.server.addresses.public.0['addr'] }}
  os_floating_ip:
    state: present
    reuse: true
    cloud: "{{ tenant }}"
    server: "{{ item.server.id }}"
    fixed_address: "{{ item.server.addresses.public.0['addr'] }}"
    network: "{{ float_pool }}"
    nat_destination: "{{ external_uuid }}"
  with_items: "{{ osp.results }}"
  register: 
  when:
    - not osp|skipped and osp.changed and osp.results|length > 0    

# when deploying multiple interfaces, we need to just use the private eth0 address
- name: building {{ application }} host group
  add_host: hostname="{{ item.server.addresses.private.0['addr'] }}" groups="{{ application }}" ansible_ssh_private_key_file="./{{ osp_keypair.key.name }}-private-key.pem" 
  with_items: "{{ osp.results }}"
  when:
    - not osp|skipped and osp.changed and osp.results|length > 0    
    - item.server.addresses.private.0['OS-EXT-IPS:type'] == 'fixed'
  
- name: building {{ application }}_master host group
  add_host: hostname="{{ osp.results.0.server.addresses.private.0['addr'] }}" groups="{{ application }}_master" ansible_ssh_private_key_file="./{{ osp_keypair.key.name }}-private-key.pem" public_internal="{{ osp.results.0.server.networks.public.0 }}"  
  when:
    - not osp|skipped and osp.changed and osp.results|length > 0    
    - osp.results.0.server.addresses.private.0['OS-EXT-IPS:type'] == 'fixed'
    - replica
    
- name: building {{ application }}_replica host group
  add_host: hostname="{{ osp.results.1.server.addresses.private.0['addr'] }}" groups="{{ application }}_replica" ansible_ssh_private_key_file="./{{ osp_keypair.key.name }}-private-key.pem"
  when:
    - not osp|skipped and osp.changed and osp.results|length > 0    
    - osp.results.1.server.addresses.private.0['OS-EXT-IPS:type'] == 'fixed'
    - replica

# wait_for doesn't work with a proxy, so we need to ssh and check output
- name: waiting for instance boot
  local_action: shell /bin/sleep 20 && /usr/bin/ssh -i ./{{ osp_keypair.key.name }}-private-key.pem "{{ item }}" echo DataNexus
  register: output
  retries: 4
  delay: 10
  until: output.stdout.find('DataNexus') != -1
  with_items: "{{ groups[application] }}"
  when:
    - not osp|skipped and osp.changed and osp.results|length > 0

# create openstack hosts file because metadata tag support for OSP is weak; note that this is simply a convenience for any follow-on playbooks
- name: configuring openstack postgresql hosts file
  lineinfile:
    create: yes
    state: present
    path: "{{ ansible_env.PWD }}/{{ project }}-{{ application }}.hostfile"
    line: '[postgresql]'
  when:
    - not osp | skipped and osp.changed and osp.results | length > 0

- name: configuring openstack postgresql hosts file
  lineinfile:
    state: present
    path: "{{ ansible_env.PWD }}/{{ project }}-{{ application }}.hostfile"
    line: "{{ item }} ansible_user={{ user }} ansible_ssh_private_key_file={{ ansible_env.PWD }}/{{ osp_keypair.key.name }}-private-key.pem"
    insertafter: EOF
  with_items: "{{ groups[application] }}"
  when:
    - not osp | skipped and osp.changed and osp.results | length > 0

- name: configuring openstack master/replica hosts file
  blockinfile:
    state: present
    create: no
    insertafter: EOF
    path: "{{ ansible_env.PWD }}/{{ project }}-{{ application }}.hostfile"
    block: |
      [{{ application }}_master]
      {{ osp.results.0.server.addresses.private.0['addr'] }} ansible_user={{ user }} ansible_ssh_private_key_file={{ ansible_env.PWD }}/{{ osp_keypair.key.name }}-private-key.pem
      [{{ application }}_replica]
      {{ osp.results.1.server.addresses.private.0['addr'] }} ansible_user={{ user }} ansible_ssh_private_key_file={{ ansible_env.PWD }}/{{ osp_keypair.key.name }}-private-key.pem
  when:
    - not osp | skipped and osp.changed and osp.results | length > 0
    - replica
